<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_17179_inbound_em.EmailMapping</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>EmailMapping</name>
        <script><![CDATA[var EmailMapping = Class.create();
EmailMapping.prototype = {
	initialize: function(email) {
		this.email = email;
		this.subject = email.subject;
		this.from = email.from;
		this.from_sys_id = email.from_sys_id;
		this.body = email.body;
		this.body_text = email.body_text;
		this.error = '';
		this.item = '';
		this.state = '';
	},
	
	
	mapEmail: function(){
		try{
			var item = '';
		var configRec = new GlideRecord('x_17179_inbound_em_email_mapping_configuration');
			configRec.addQuery('active', true);
			configRec.addQuery('subject', this.subject);
			configRec.query();
			
			if(configRec.next()){
				item = configRec.item;
			}
			else{
				return "false";
			}
			this.state = configRec.created_state;
			this.item = item;
			this.createRITM(item);
		}
		catch(err){gs.log("Error detected in SI: EmailMapping, function: mapEmail " +err.message);}
	},
	
	createRITM: function(item) {
		try{
			var cart = new Cart();
			var cartItem = cart.addItem(item);
			
			var object = '';
			object = new JSON().decode(this.getVariables(item));
			
			for(var i = 0; object.length > i; i++){
			
				
				if(object[i].type == 3) //If type is Multiple Choice
					{
					var gr = new GlideRecord('question_choice');
					gr.addQuery('question', object[i].sys_id);
					gr.addQuery('text', this.body[object[i].email]);
					gr.query();
					
					if (gr.next()){
						cart.setVariable(cartItem, object[i].sn, gr.value);
					}
				}
			
				else if(object[i].emailAtt !== null){
					if(object[i].emailAtt == "Subject"){
					cart.setVariable(cartItem, object[i].sn, this.subject);
					}
				}
				
				else if(object[i].email == 'arm_manager'){
					cart.setVariable(cartItem, object[i].sn, this.getUserRec(this.body[object[i].email]).sys_id);
				}
				else if(object[i].email == 'requested_by'){
					cart.setVariable(cartItem, object[i].sn, this.getUserRec(this.from_sys_id).sys_id);
					cart.setVariable(cartItem,'requestors_department', this.getUserRec(this.from_sys_id).department);
				}
				else{
					cart.setVariable(cartItem, object[i].sn, this.body[object[i].email]);
				}
			}
			var rc = cart.placeOrder();
			this.updateRITM(rc.sys_id);
		}
		catch(err){gs.log("Error detected in SI: EmailMapping, function: createRITM " +err.message);}
	},
	
	updateRITM: function(req){
		try{
			var ritm = new GlideRecord('sc_req_item');
			ritm.addQuery('request', req);
			ritm.query();
			while (ritm.next()){
				ritm.state = this.state;
				ritm.work_notes = this.body_text;
				ritm.contact_type = "email";
				ritm.short_description = this.subject;
				ritm.update();
			}
		}
		catch(err){gs.log("Error detected in SI: EmailMapping, function: updateRITM " +err.message);}
	},
	
	getVariables : function(itemSysID){
		try{
			//checks the mapping table for mapped values and returns to the create function in JSON object
			var array = [];
			var variables = new GlideRecord('x_17179_inbound_em_email_mapping');
			variables.addQuery('item', itemSysID);
			variables.query();
			
			if(variables.hasNext()){
				while(variables.next()){
				var email = variables.getDisplayValue('email_field');
				var variable =  variables.variable.getRefRecord();
				var sn = variable.getValue('name');
				var type = variable.getValue('type');
				var sys_id = variable.getUniqueValue();
				var emailAtt = variables.getValue('email_attribute');
				
				var obj = {};
				obj.email = email;
				obj.sn = sn;
				obj.type = type;
				obj.sys_id = sys_id;
				obj.emailAtt = emailAtt;
					
				array.push(obj);
			}
			var json = JSON.stringify(array);
			return json;
		}
			else{
				this.createEmailVars();
			}
		}
		catch(err){gs.log("Error detected in SI: EmailMapping, function: getVariables " +err.message);}
	},
	
	getUserRec: function(emailVariable){
		try{
			
			var user = new GlideRecord('sys_user');
			user.addQuery('name', emailVariable).addOrCondition('sys_id', emailVariable);
			user.query();
			if(user.next()){
				return user;
			}
			else{
				return;
			}
		}
		catch(err){gs.log("Error detected in SI: EmailMapping, function: getUserRec " +err.message);}
	},

	getTable: function() {
	try{
		//Gets the email body and looks for table tags to output the table from the email
		emailRef.body = emailRef.body.substring(emailRef.body.search("<table class"), emailRef.body.search("</table>"));
		emailRef.body = emailRef.body.replace(/:/g, "");
		return emailRef.body;
	}
	catch(err){gs.log("Error detected in SI: EmailMapping, function: getTable " +err.message);}
},
	
	createEmailVars: function(){
		try{
			for (var x in this.body){
				var gr = new GlideRecord('x_17179_inbound_em_email_mapping');
				gr.initialize();
				gr.email_field = x;
				gr.item = this.item;
				gr.map_to = "Email body";
				gr.insert();
			}
		}
		catch(err){gs.log("Error detected in SI: EmailMapping, function: getTable " +err.message);}
	},
	
	type: 'EmailMapping'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-12-11 12:57:50</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>92c172d40f030300c0c588cce1050e9a</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>EmailMapping</sys_name>
        <sys_package display_value="Inbound Email Mapping" source="x_17179_inbound_em">ae7f26140f030300c0c588cce1050e13</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Inbound Email Mapping">ae7f26140f030300c0c588cce1050e13</sys_scope>
        <sys_update_name>sys_script_include_92c172d40f030300c0c588cce1050e9a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-12-12 10:46:24</sys_updated_on>
    </sys_script_include>
</record_update>
